swagger: '2.0'
info:
  version: 0.22.0
  title: PickUp Node API
  description: PickUp's Node API
paths:
  /props:
    get:
      description: Returns a collection of props
      parameters:
        - in: query
          name: id
          type: integer
          description: ID of prop to return
          required: false
        - in: query
          name: limit
          type: integer
          description: Set a limit to the number of props returned per page
          required: false
        - in: query
          name: offset
          type: integer
          description: Number of props to skip over when returning props
          required: false
        - in: query
          name: token
          type: string
          required: true
          description: Publisher token
        - in: query
          name: picks
          type: string
          default: true
          description: Set to `false` to query props without picks attached

      responses:
        200:
          description: Successfully returned a list of props
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  example: 3829
                created_at:
                  type: string
                  example: '2020-07-20 05:12:57.528962'
                updated_at:
                  type: string
                  example: '2020-07-20 05:12:57.528962'
                proposition:
                  type: string
                  example: 'Where do the 76ers finish in the East?'
                league:
                  type: string
                  example: "nba"
                user_id:
                  type: integer
                  example: 2
                  description: User id of the admin who created the prop
                fan_picks_count:
                  type: integer
                  example: 2395
                  description: Number of fan picks on a prop, may be deprecated in the future
                utm_term_tag:
                  type: string
                  example: aaron-rodgers
                  description: 'Player term tag, can be null'
                utm_content_tag: 
                  type: string
                  example: nba-future-yesno-2
                  description: UTM Encoding for the prop which includes teams, league, and more
                close_time:
                  type: string
                  example: '2021-03-24T00:00:00.000Z'
                  description: Prop close time when not attached to an event (I think...)
                close_time_id:
                  type: string
                  example: a4664806ba3e0ecca7432e3e
                  description: Sidekick ID for Rails, may be deprecated in the near future
                slug:
                  type: string
                  example: 'where-do-the-76ers-finish-in-the-east'
                  description: Prop slug
                featured_leaderboard_id:
                  type: integer
                  example: 67
                  description: Featured leaderboard this prop is associated with
                event_id:
                  type: integer
                  example: 74
                  description: Event the prop is assigned to, if the event close time is sooner than the prop close time, the event close time wins
                publish_at:
                  type: string
                  example: '2021-03-24T00:00:00.000Z'
                  description: Future forward publish time, to allow publishing in the future
                close_at:
                  type: string
                  example: '2021-03-24T00:00:00.000Z'
                  description: Event close time if applicable - can also be null
                status:
                  type: string
                  example: 'pending'
                  description: Prop status, a new introduction to the API, signifies the status of the entire prop
                picks:
                  type: array
                  items:
                    type: object
                    properties:
                      prop_id:
                        type: integer
                        example: 8044
                      pick_id:
                        type: integer
                        
                      id:
                        type: integer
                        example: 2323
                      title:
                        type: string
                        example: 'Celtics beat the Bucks on 3/24'
                      created_at:
                        type: string
                        example: '2021-03-20 01:08:25.530295'
                      updated_at:
                        type: string
                        example: '2021-03-20 01:08:25.530295'
                      state:
                        type: string
                        example: 'pending'
                      fan_picks_count:
                        type: number
                        example: 51
                      user_id:
                        type: number
                        example: 2
                      graded_at:
                        type: string
                        example: '2021-03-13 18:13:58.140031'
                      display_title:
                        type: string
                        example: Celtics

        403:
          description: Permission Denied
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Forbidden'

  /props/closing:
    get:
      description: Returns a collection of props that are closing in the next 48 hours
      parameters:
        - in: query
          name: token
          type: string
          required: true

      responses:
        200:
          description: Successfully returned a list of props closing within 48 hours
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  example: 4035
                close_time:
                  type: string
                  example: '2021-05-20T01:18:00.000Z'
                proposition:
                  type: string
                  example: 'Will Steph Curry be traded?'
                created_at:
                  type: string
                  example: '2021-01-20T01:18:12.689Z'
                updated_at:
                  type: string
                  example: '2021-01-20T01:18:12.689Z'

        403:
          description: Permission Denied
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Forbidden'

  /publishers/demo:
    post:
      description: 'Sends a publisher demo request email to the content team'
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: formData
          name: publisherEmail
          type: string
          description: User entered email
        - in: query
          name: token
          type: string
          required: true
      responses:
        200:
          description: Successfully sent demo request
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 0
                
  /publishers/posts:
    delete:
      description: Deletes a homebase post created by the requesting publisher, publishers can only delete their own posts
      parameters:
        - in: query
          name: token
          description: Publisher Access Token
          type: string
        - in: query
          name: publisher_id
          description: Publisher ID
          type: integer
        - in: query
          name: post_id
          description: Post ID to delete
          type: integer
      responses:
        200:
          description: OK
          schema: 
            type: object
            properties: 
              message: 
                type: string
                example: Deleted
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Bad Request'
    

  /leagues:
    get:
      description: 'Returns a collection of currently supported leagues'
      responses:
        200:
          description: 'Successfully returned a collection of supported leagues'
          schema:
            type: array
            items:
              type: object
              properties:
                value:
                  type: string
                  example: 'mlb'
                label:
                  type: string
                  example: 'MLB'
        403:
          description: Permission Denied
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Forbidden'
  /leagues/postCount:
    get:
      description: 'Returns a number of active posts that exist under passed league(s)'
      parameters:
        - in: query
          name: token
          type: string
          required: true
        - in: query
          name: league
          type: string
          required: true
      responses:
        200:
          description: 'Successfully returned a count of active posts for league(s)'
          schema:
            type: array
            items:
              type: object
              properties: 
                count: 
                  type: string
                  example: "23"
        403:
          description: Permission Denied
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Forbidden'
  /users:
    get:
      description: 'Returns a collection of PickUp admin users'
      parameters:
        - in: query
          name: id
          type: integer
          description: ID of user to return
      responses:
        200:
          description: 'Successfully returned a collection of PickUp admin users'
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  example: 420
                first_name:
                  type: string
                  example: Archie
                last_name:
                  type: string
                  example: Bradley
                email:
                  type: string
                  example: a.bradley@mlb.com
                avatar:
                  type: string
                  example: headshot.jpg
  /buckets:
    get: 
      description: Gets a collection of Post Bukcets
      parameters:
        - in: query
          name: id
          type: integer
          description: Gets a bucket by ID
        - in: query
          name: location
          type: string
          description: 'Gets buckets by location'
        - in: query
          name: token
          type: string
          required: true
          description: 'Active publisher token'
      responses:
        200:
          description: 'Successfully returned collection of Post Buckets'
          schema:
            type: array
            items: 
              type: object
              properties:
                id:
                  type: integer
                  example: 23
                title:
                  type: string
                  example: "J.J. Watt to the Cards!"
                position:
                  type: string
                  example: 'homepage'
                created_by_id:
                  type: integer
                  example: 2
                  description: 'Admin user who created the bucket'
                created_at:
                  type: string
                  example: '2021-04-01T19:37:20.531Z'
                updated_at:
                  type: string
                  example: '2021-04-01T20:37:20.531Z'
                deleted_at:
                  type: string
                  example: '2021-04-20T19:37:20.531Z'
        400:
          description: Bad request, did you pass an access token?
          schema:
            type: object
            properties: 
              message:
                type: string
                example: 'Bad Request'
    post:
      description: Creates a Post Bucket
      consumes:
        - application/json
      parameters:
      - in: query
        name: token
        type: string
        description: Admin token
        required: true
      - in: body
        name: post
        description: Creates a PickUp Post Bucket with supplied properties
        schema:
          type: object
          required:
            - title
            - position
          properties:
            title:
              type: string
              example: 'J.J. Watts to the Cards!'
            position: 
              type: string
              example: 'homepage'
            updated_at:
              type: string
              example: '2021-04-20T19:37:20.531Z'
            deleted_at:
              type: string
              example: '2021-04-20T19:37:20.531Z'
      responses:
        201:
          description: 'Successfully created bucket'
          schema:
            type: object
            properties:
              message:
                type: string
                example: Created
              id:
                type: integer
                example: 23
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              message:
                type: string
                example: Bad Request
                
    put:
      description: Updates a Post Bucket
      consumes:
        - application/json
      parameters:
      - in: query
        name: token
        type: string
        description: Admin token
        required: true
      - in: query
        name: id
        type: integer
        description: ID of the Post Bucket to update
        required: true
      - in: body
        name: post
        description: Updates a PickUp Post Bucket with supplied properties
        schema:
          type: object
          required:
            - title
            - position
          properties:
            title:
              type: string
              example: 'J.J. Watts to the Cards!'
            position: 
              type: string
              example: 'homepage'
            updated_at:
              type: string
              example: '2021-04-20T19:37:20.531Z'
            deleted_at:
              type: string
              example: '2021-04-20T19:37:20.531Z'
      responses:
        200:
          description: 'Successfully updated bucket'
          schema:
            type: object
            properties:
              message:
                type: string
                example: Updated
              id:
                type: integer
                example: 23
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              message:
                type: string
                example: Bad Request
                
    delete:
      description: Deletes a Post Bucket
      consumes:
        - application/json
      parameters:
      - in: query
        name: token
        type: string
        description: Admin token
        required: true
      - in: query
        name: id
        type: integer
        description: ID of the Post Bucket to delete
        required: true
      responses:
        200:
          description: 'Successfully deleted bucket'
          schema:
            type: object
            properties:
              message:
                type: string
                example: Deleted
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              message:
                type: string
                example: Bad Request
  
  /buckets-posts:
    post:
      description: 'Creates post association with a specific Bucket'
      consumes:
        - application/json
      parameters:
        - in: query
          name: token
          type: string
          description: Publisher Token
          required: true
        - in: body
          name: body
          description: Attaches a post to a Bucket
          required: true
          schema:
            type: object
            required:
              - bucket_id
              - post_id
            properties:
              bucket_id:
                type: integer
                example: 23
              post_id:
                type: integer
                example: 5843
              order:
                type: integer
                example: 2
      responses:
        200:
          description: 'Successfully attached post to bucket'
          schema: 
            type: object
            properties:
              message:
                type: string
                example: Created
        400:
          description: 'Could not attach post to bucket'
          schema: 
            type: object
            properties:
              message:
                type: string
                example: Bad Request
    patch:
      description: 'Creates post association with a specific Bucket'
      consumes:
        - application/json
      parameters:
        - in: query
          name: token
          type: string
          description: Publisher Token
          required: true
        - in: query
          name: post_id
          type: integer
          description: "`post_id` on `bucket_post` record to update, **note**: this is not the `id` for the record istelf"
          required: true
        - in: query
          name: bucket_id
          type: integer
          description: "bucket_id to target"
          required: true
        - in: body
          name: body
          description: Payload to update
          required: true
          schema:
            type: object
            properties:
              bucket_id:
                type: integer
                example: 23
              post_id:
                type: integer
                example: 5843
              order:
                type: integer
                example: 2
      responses:
        200:
          description: 'Successfully updated bucket_post record'
          schema: 
            type: object
            properties:
              message:
                type: string
                example: Updated
        400:
          description: 'Could not update post bucket record'
          schema: 
            type: object
            properties:
              message:
                type: string
                example: Bad Request
    delete:
      description: 'Deletes post association with a specific Bucket. **NOTE**: This only removes the association with the bucket and does not modify the post record in any form.'
      consumes:
        - application/json
      parameters:
        - in: query
          name: token
          type: string
          description: Admin Token
          required: true
        - in: query
          name: id
          type: number
          description: id of buckets_posts record to delete
          required: true

      responses:
        200:
          description: 'Successfully removed post from bucket'
          schema: 
            type: object
            properties:
              message:
                type: string
                example: Deleted
        400:
          description: 'Could not dettach post from bucket'
          schema: 
            type: object
            properties:
              message:
                type: string
                example: Bad Request
                  
  /posts:
    get:
      description: 'Returns a collection of PickUp Posts'
      parameters:
        - in: query
          name: limit
          type: integer
          description: Limit the number of posts to return
        - in: query
          name: offset
          type: integer
          description: Number of posts to skip over in response
        - in: query
          name: id
          type: array
          items:
            type: string
          description: Returns post or posts with matching ID(s)
        - in: query
          name: article_url
          type: string
          description: Returns post or posts with matching article_url values
        - in: query
          name: league
          type: string
          description: Returns league specific posts matching league name
        - in: query
          name: publisher_id
          type: string
          description: Returns posts from specific publisher
        - in: query
          name: prop_id
          type: integer
          description: Returns post or posts with matching prop_id value
        - in: query
          name: search
          type: string
          description: 'Searches `post_title` and `headline` columns for relevant strings. **NOTE**: League query has no effect when using search query'
        - in: query
          name: token
          type: string
          required: true
      responses:
        200:
          description: 'Successfully returned a collection of PickUp Posts'
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  example: 23
                post_title:
                  type: string
                  example: 'Will Steph Curry be traded?'
                league:
                  type: array
                  items:
                    type: string
                    example: NBA
                prop_id:
                  type: integer
                  example: 4032
                article_url:
                  type: string
                  example: 'https://nba.com/news/2020/02/14/warriors-next-moves-steph-curry'
                headline:
                  type: string
                  example: 'With a dissapointing season in the books, what are the Warriors next moves?'
                excerpt:
                  type: string
                  example: 'The Champions no more, the Warriors are wondering where it all broke down. Despite an impressive performance from Curry the shortcommings are too blinding to ignore.'
                featured_img:
                  type: string
                  example: 'https://aws.bucket.fake.pckp.io/posts/390382084.jpg'
                published_at:
                  type: string
                  example: '2021-01-20T01:18:12.689Z'
                updated_at:
                  type: string
                  example: '2021-01-20T01:18:12.689Z'
                deleted_at:
                  type: string
                  example: null
                publisher_name:
                  type: string
                  example: 'NBA Analysis Network'
                author_id:
                  type: integer
                  example: null
                publisher_source_url:
                  type: string
                  example: 'https://www.nbaanalysis.net'
                publisher_logo:
                  type: string
                  example: 'nbaanalysislogo.jpg'
                publisher_id:
                  type: integer
                  example: 3
                slug:
                  type: string
                  example: 'warriors-next-moves-steph-curry-4032'

        403:
          description: Permission Denied
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Forbidden'
    post:
      description: Creates a PickUp Post (Currently referred to as Homebase Post)
      consumes:
        - application/json
      parameters:
        - in: body
          name: post
          description: Creates a PickUp Post with supplied properties
          schema:
            type: object
            required:
              - post_title
              - league
              - prop_id
              - article_url
              - headline
              - excerpt
              - featured_img
            properties:
              post_title:
                type: string
              league:
                type: array
                items:
                  type: string
              prop_id:
                type: integer
              article_url:
                type: string
              headline:
                type: string
              excerpt:
                type: string
              featured_img:
                type: string
        - in: query
          name: token
          type: string
          required: true
      responses:
        201:
          description: Successfully created a PickUp Post
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Created'
        403:
          description: Permission Denied
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Forbidden'

    put:
      description: Updates an entire PickUp Post Record
      consumes:
        - application/json
      parameters:
        - in: body
          name: post
          description: Updates a PickUp Post with supplied properties
          schema:
            type: object
            required:
              - post_title
              - league
              - prop_id
              - article_url
              - headline
              - excerpt
              - featured_img
            properties:
              post_title:
                type: string
              league:
                type: array
                items:
                  type: string
              prop_id:
                type: integer
              article_url:
                type: string
              headline:
                type: string
              excerpt:
                type: string
              featured_img:
                type: string
        - in: query
          name: token
          type: string
          required: true

      responses:
        201:
          description: Successfully updated a PickUp Post
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Updated'
        403:
          description: Permission Denied
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Forbidden'

    delete:
      description: Deletes an entire PickUp Post Record
      consumes:
        - application/json
      parameters:
        - in: query
          name: id
          type: integer
          description: ID of post to delete
          required: true
        - in: header
          name: 'x-PickUp-Access-Token'
          type: string
          required: true

      responses:
        201:
          description: Successfully updated a PickUp Post
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Deleted'
        403:
          description: Permission Denied
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Forbidden'
                
  /picks:
    get:
      description: Gets picks from the database (picks have a many relationship to props)
      parameters:
        - in: query
          name: token
          description: Publisher token
          type: string
          required: true
        - in: query
          name: prop_id
          description: Filters picks by prop_id
          type: integer
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  example: 2323
                title:
                  type: string
                  example: 'Celtics beat the Bucks on 3/24'
                created_at:
                  type: string
                  example: '2021-03-20 01:08:25.530295'
                updated_at:
                  type: string
                  example: '2021-03-20 01:08:25.530295'
                state:
                  type: string
                  example: 'pending'
                fan_picks_count:
                  type: number
                  example: 51
                user_id:
                  type: number
                  example: 2
                graded_at:
                  type: string
                  example: '2021-03-13 18:13:58.140031'
  /fans/pick:
    post:
      description: Creates an unverified fan pick on the specified pick
      parameters:
        - in: query
          name: token
          description: Publisher Token
          type: string
        - in: body
          name: body
          description: Creates a fan pick
          required: true
          schema:
            type: object
            required:
              - pick_id
              - prop_id
              - source_url
              - publisher_id
              - ip_address
            properties:
              pick_id:
                type: integer
                example: 7632
                description: ID of the Pick being made
              prop_id:
                type: integer
                example: 6420
                description: ID of the Prop the Pick is being made against
              source_url:
                type: string
                example: https://borderfuelsports.com/nba-play-in-tournament-set-to-return-in-2021-22/
                description: Source where pick was made
              publisher_id:
                type: integer
                example: 2
                description: Publisher's PickUp ID
              ip_address:
                type: string
                example: 123.23.123.23
                description: IP Address of the user making the pick
              fan_id:
                type: integer
                example: 4665
                description: ID of the Fan making the pick, can be null if they are not logged in/not verified yet
      responses: 
        201:
          description: Created unverified Fan Pick - Returns the Fan Pick ID for claiming
          schema: 
            type: array
            items:
              type: object
              properties:
                id: 
                  type: string
                  example: 76483
                  
  /stats/posts-by-day:
    get: 
      description: Gets all posts grouped by days
      parameters:
        - in: query
          name: token
          description: Admin token
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                date:
                  type: integer
                  example: 34
                
        400:
          description: 'Bad Request'
          schema: 
            type: object
            properties:
              message:
                type: string
                example: Bad Request
                
  /prizes:
    get:
      description: Get all prizes from the database and its redemption status with a fan id
      parameters:
        - in: query
          name: token
          description: Publisher token
          type: string
          required: true
        - in: query
          name: fanId
          description: Database id assigned to the fan (pass this when you want to update the prize redemption status)
          type: integer
          required: false
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                  example: '1'
                title:
                  type: string
                  example: 'Game of bowling for 2 people'
                short_desc:
                  type: string
                  example: 'In-person - $30 value'
                long_desc:
                  type: string
                  example: 'Enjoy a free game of bowling and shoe rental for 2 people at any of our participating centers around the country'
                external_url:
                  type: string
                  example: 'www.bowlero.com'
                image_url:
                  type: string
                  example: 'https://playpickup.s3.us-east-2.amazonaws.com/away-team/kasper/homebase/prize-images/bowlero_lanes.jpg'
                points_cost:
                  type: string
                  example: '250'
                created_at:
                  type: string
                  example: '2021-04-21T21:06:45.982Z'
                updated_at:
                  type: string
                  example: '2021-04-21T21:06:45.982Z'
                status:
                  type: string
                  example: 'Available Now'
                min_days_between_redemptions:
                  type: string
                  example: '30'
                redemption_type:
                  type: string
                  example: 'barcode'
                banner_image_url:
                  type: string
                  example: 'https://playpickup.s3.us-east-2.amazonaws.com/marketplace/logos/pickup-bowlero.png'
                prize_name:
                  type: string
                  example: 'Bowlero'
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Bad Request'
        403:
          description: Internal Server Error
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Internal Server Error'
    
# Added by API Auto Mocking Plugin
host: api.playpickup.com
basePath: /v1
schemes:
  - https